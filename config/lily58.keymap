/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    macros {
        greater: greater {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp KP_EQUAL &kp GREATER_THAN>;
            label = "GREATER";
        };

        lessthan: lessthan {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp KP_EQUAL>;
            label = "LESSTHAN";
        };

        selectword: selectword {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(LEFT_ARROW)>;
            label = "SELECTWORD";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp A &kp L &kp P &kp E &kp R &kp Y &kp A &kp Y &kp L &kp A &kp C &kp I &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };

        email2: email2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp T &kp H &kp E &kp DOT &kp M &kp I &kp K &kp H &kp A &kp I &kp L &kp DOT &kp T &kp A &kp L &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL2";
        };
    };

    behaviors {
        rightSpaceThumb: rightSpaceThumb {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHTSPACETHUMB";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <54>;
            tapping-term-ms = <200>;
        };

        new_webpages: new_webpages {
            compatible = "zmk,behavior-tap-dance";
            label = "NEW_WEBPAGES";
            #binding-cells = <0>;
            bindings = <&kp T>, <&kp LG(T)>, <&kp LG(LS(N))>;
        };

        logout_shortkeys: logout_shortkeys {
            compatible = "zmk,behavior-tap-dance";
            label = "LOGOUT_SHORTKEYS";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&kp LG(LC(Q))>;
        };
    };

    combos {
        compatible = "zmk,combos";

        jkjk {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <31 32>;
            layers = <0>;
        };

        triple-delete {
            bindings = <&kp LG(BACKSPACE)>;
            key-positions = <31 32 33>;
            layers = <0>;
        };

        webpage-undo {
            bindings = <&kp LS(LG(T))>;
            key-positions = <25 28>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            display-name = "Base";
            bindings = <
&kp ESCAPE      &kp N1  &kp N2  &kp N3        &kp N4    &kp N5                                     &kp N6  &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB         &kp Q   &kp W   &kp E         &kp R     &kp T                                      &kp Y   &kp U   &kp I      &kp O    &kp P     &kp APOSTROPHE
&kp LCTRL       &kp A   &kp S   &kp D         &kp F     &kp G                                      &kp H   &kp J   &kp K      &kp L    &kp SEMI  &kp ENTER
&kp LEFT_SHIFT  &kp Z   &kp X   &kp C         &kp V     &kp B   &kp ENTER        &kp LS(LG(LEFT))  &kp N   &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RIGHT_SHIFT
                                &kp LEFT_ALT  &kp LGUI  &mo 1   &kp BACKSPACE    &kp SPACE         &mo 2   &mo 4   &mo 3
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Lower";
            bindings = <
&kp EQUAL      &kp EXCL   &kp AT                  &kp HASH                 &kp DOLLAR       &kp PRCNT                                           &kp CARET     &kp AMPS      &kp STAR      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp TILDE
&kp LG(GRAVE)  &kp LG(N)  &kp LA(LG(LEFT_ARROW))  &kp LA(LG(RIGHT_ARROW))  &kp LC(LS(TAB))  &kp LC(TAB)                                         &kp N7        &kp N8        &kp N9        &kp PLUS              &kp MINUS              &kp SLASH
&kp TAB        &kp LCTRL  &kp LEFT_ALT            &kp LEFT_GUI             &kp LEFT_SHIFT   &kp F12                                             &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp ASTRK             &kp SLASH              &kp PIPE
&kp SPACE      &kp LG(Z)  &kp LG(X)               &kp LG(C)                &kp LG(V)        &kp F11      &kp LG(LS(NUMBER_4))    &kp ESCAPE     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp RIGHT_SHIFT
                                                  &kp LG(LA(F))            &kp LG(LA(C))    &trans       &kp F10                 &kp BACKSPACE  &kp N0        &kp DOT       &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |      |   <-  |   v   |  ^   |  ->   |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            display-name = "Raise";
            bindings = <
&kp F1  &kp F2            &kp F3        &kp F4        &kp F5          &kp F6                                                 &kp LESS_THAN           &kp GREATER_THAN    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp LEFT_BRACE       &kp RIGHT_BRACE
&trans  &trans            &trans        &trans        &trans          &trans                                                 &greater                &kp LA(LEFT_ARROW)  &kp UP_ARROW          &kp RA(RIGHT_ARROW)    &kp LG(PLUS)         &kp BACKSLASH
&trans  &kp LEFT_CONTROL  &kp LEFT_ALT  &kp LEFT_GUI  &kp LEFT_SHIFT  &trans                                                 &kp LS(LA(LEFT_ARROW))  &kp LEFT            &kp DOWN              &kp RIGHT              &kp LG(KP_SUBTRACT)  &kp ENTER
&trans  &trans            &trans        &trans        &trans          &trans  &kp LC(LA(LG(LEFT)))    &kp RA(RC(RG(RIGHT)))  &kp INSERT              &kp HOME            &kp END               &trans                 &kp LEFT_BRACKET     &kp RIGHT_BRACKET
                                        &kp LEFT_ALT  &kp LEFT_GUI    &trans  &kp BACKSPACE           &kp ENTER              &trans                  &kp LA(LG(LEFT))    &kp RA(RG(RIGHT))
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        layer_3 {
            bindings = <
&kp LA(LG(LC(LEFT_ARROW)))  &kp RA(RC(RG(RIGHT)))  &trans  &trans  &trans  &trans                               &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &bt BT_CLR_ALL              &trans
&kp LG(GRAVE)               &trans                 &trans  &trans  &trans  &trans                               &trans        &trans        &trans        &trans      &bt BT_PRV                  &bt BT_NXT
&kp LC(LG(LEFT))            &kp RC(RG(RIGHT))      &trans  &trans  &trans  &trans                               &trans        &trans        &trans        &trans      &kp LC(LG(LEFT_ARROW))      &kp RC(RG(RIGHT_ARROW))
&kp RS(RG(RC(LEFT_ARROW)))  &kp RS(RC(RG(RIGHT)))  &trans  &trans  &trans  &trans  &trans    &trans             &kp F7        &kp F8        &kp F9        &trans      &kp LS(LG(LC(LEFT_ARROW)))  &kp RS(RC(RG(RIGHT_ARROW)))
                                                           &trans  &trans  &trans  &trans    &logout_shortkeys  &trans        &trans        &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans
            >;
        };
    };
};
